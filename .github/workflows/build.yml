name: build
'on':
  pull_request:
    branches:
      - bsan
    paths:
      - '**/*.rs'
      - '**/*.toml'
      - '**/*.yml'
      - src/llvm-project
  schedule:
    - cron: "0 0 * * *"
  workflow_dispatch: null
permissions:
  contents: read
defaults:
  run:
    shell: bash
jobs:
  fmt:
    runs-on: macos-latest
    name: Formatting
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Switch to nightly
        run: |
          rustup default nightly-2024-11-21
          rustup component add rust-src rustc-dev llvm-tools-preview clippy
      - name: Upstream
        run: src/ci/scripts/setup-upstream-remote.sh
      - name: Format
        run: ./x.py fmt --check
      - name: Clippy (bsan-rt)
        run: |
          cd src/tools/bsan/bsan-rt
          RUSTFLAGS='-C panic=abort -Zpanic_abort_tests' cargo clippy --all-targets --all-features -- -D warnings
      - name: Clippy (bsan-driver)
        run: |
          cd src/tools/bsan/bsan-driver
          cargo clippy --all-targets --all-features -- -D warnings
      - name: Clippy (cargo-bsan)
        run: |
          cd src/tools/bsan/bsan-driver/cargo-bsan
          cargo clippy --all-targets --all-features -- -D warnings
  build:
    needs: [fmt]
    strategy:
      fail-fast: false
      matrix:
        config:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    runs-on: '${{ matrix.config.os }}'
    name: '${{ matrix.config.target }}'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install dependencies
        run: |
          rustup component add llvm-tools-preview
          cp src/bootstrap/defaults/config.bsan.dev.toml config.toml
      - name: Upstream
        run: src/ci/scripts/setup-upstream-remote.sh
      - name: Configure LLVM
        run: |
          export LLVM_COMMIT=$(git ls-tree --object-only --abbrev=7 HEAD src/llvm-project)
          echo "LLVM_COMMIT=$LLVM_COMMIT" >> $GITHUB_ENV
      - name: Cache LLVM
        id: cache-llvm
        uses: actions/cache@v4
        with:
          path: llvm.tar.gz
          key: ${{ matrix.config.target }}-${{ matrix.config.os }}-${{ env.LLVM_COMMIT }}
      - name: Decompress LLVM
        if: steps.cache-llvm.outputs.cache-hit == 'true'
        run: |
          mkdir -p build/host/llvm
          tar -xzvf llvm.tar.gz
      - name: Build LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: ./x.py build llvm --stage 1
      - name: Compress LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        run: tar -czvf llvm.tar.gz build/${{ matrix.config.target }}/llvm        
      - name: Save LLVM
        if: steps.cache-llvm.outputs.cache-hit != 'true'
        id: cache-llvm-save
        uses: actions/cache/save@v4
        with:
          path: llvm.tar.gz
          key: ${{ matrix.config.target }}-${{ matrix.config.os }}-${{ env.LLVM_COMMIT }}
      - name: Build
        run: ./x.py build --stage 1
      - name: Unit Tests
        run: ./x.py test --stage 1 src/tools/bsan/bsan-rt
      - name: UI Tests
        run: ./x.py test --stage 2 src/tools/bsan/bsan-driver
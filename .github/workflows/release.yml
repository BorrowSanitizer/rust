name: release
on:
  workflow_dispatch:
permissions:
  actions: write
  contents: write
defaults:
  run:
    shell: bash
concurrency:
  group: "release"
  cancel-in-progress: true
env:
  prefix: bsan
jobs:
  init:
    runs-on: ubuntu-latest
    name: Init
    outputs:
        rustc_sha: ${{ steps.info.outputs.rustc_sha }}
        rustc_sha_short: ${{ steps.info.outputs.rustc_sha_short }}
        rustc_version_num: ${{ steps.info.outputs.rustc_version_num }}
        rustc_version: ${{ steps.info.outputs.rustc_version }}
        release_name: ${{ steps.info.outputs.release_name }}
        date: ${{ steps.info.outputs.date }}
    steps:
      - uses: actions/checkout@v4
        with:
          repository: BorrowSanitizer/rust
      - name: Set version info
        id: info
        run: |
            export rustc_version_num=$(cat src/version)
            export rustc_version=$rustc_version_num-dev
            export rustc_sha=${{ github.sha }}
            export rustc_sha_short="$(echo $rustc_sha | cut -c1-7)"
            echo "rustc_version=$rustc_version" >> "$GITHUB_OUTPUT"
            echo "rustc_sha=$rustc_sha" >> "$GITHUB_OUTPUT"
            echo "rustc_sha_short=$rustc_sha_short" >> "$GITHUB_OUTPUT"
            echo "release_name=rolling-$rustc_version-$rustc_sha_short" >> "$GITHUB_OUTPUT"
            echo "rustc_version_num=$rustc_version_num" >> "$GITHUB_OUTPUT"
            echo "date=$(date +'%Y-%m-%d')" >> "$GITHUB_OUTPUT"

            echo $rustc_version
            echo $rustc_sha
            echo $release_name
  build:
    needs: [init]
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            free_disk: true
          - os: ubuntu-24.04-arm
            target: aarch64-unknown-linux-gnu
            free_disk: true
    runs-on: '${{ matrix.config.os }}'
    name: 'Build (${{ matrix.config.target }})'
    steps:
      - uses: actions/checkout@v4
        with:
          repository: BorrowSanitizer/rust

      - name: Configure
        id: config
        continue-on-error: true
        run: |
          git submodule update --init src/tools/bsan
          git config --global --add safe.directory $GITHUB_WORKSPACE
          echo "artifact=${{ env.prefix }}-${{ needs.init.outputs.rustc_sha_short }}-${{ matrix.config.target }}" >> $GITHUB_OUTPUT
          
      - name: Install dependencies
        run: rustup component add llvm-tools

      - name: Free up disk space
        run: src/ci/scripts/free-disk-space.sh
        if: matrix.config.free_disk

      - name: Dist
        run: ./x.py dist --config src/bootstrap/defaults/bootstrap.bsan.release.toml

      - name: Publish
        uses: actions/upload-artifact@v4
        with:
          compression-level: 0
          name: ${{ steps.config.outputs.artifact }}
          path: |
            ./build/dist/rustc-dev-${{ needs.init.outputs.rustc_version }}-${{ matrix.config.target }}.tar.xz
            ./build/dist/rust-dev-${{ needs.init.outputs.rustc_version }}-${{ matrix.config.target }}.tar.xz
            ./build/dist/rust-${{ needs.init.outputs.rustc_version }}-${{ matrix.config.target }}.tar.xz
            ./build/dist/rust-src-${{ needs.init.outputs.rustc_version }}.tar.xz
           
  release:
    name: Update rolling release
    needs: [init, build]
    runs-on: macos-latest
    steps:
      - name: Download all artifacts
        id: artifact_download
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Unzip doubly-compressed artifacts
        run: |
          find . -name "*.zip" -exec unzip -o -d . {} \; 
          find . -name "*.tar.xz"
          ls -la

      - name: Delete matching rolling release (if it exists)
        continue-on-error: true
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release delete "${{ needs.init.outputs.release_name }}" --repo ${{ github.repository }} --yes --cleanup-tag

      - name: Create and publish release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh release create "${{ needs.init.outputs.release_name }}" \
            --repo ${{ github.repository }} \
            --target ${{ needs.init.outputs.rustc_sha }} \
            --title "Rolling Release ${{ needs.init.outputs.date }} - ${{ needs.init.outputs.rustc_version }}" \
            --notes "Rolling release from continuous integration." \
            --prerelease
          gh release upload \
            "${{ needs.init.outputs.release_name }}" \
            $(find . -name "*.tar.xz") \
            --repo ${{ github.repository }} \
            --clobber
          
      - name: Delete old rolling releases
        env:
          GH_TOKEN: ${{ github.token }}
        run : |
          gh release list \
            --repo BorrowSanitizer/rust \
            --limit 11 \
            --json tagName \
            -q '[.[] | select(.tagName | startswith("rolling"))][10:] | .[] | .tagName' |
          while read -r tag; do
            echo "Deleting release $tag."
            gh release delete "$tag" --yes --cleanup-tag --repo BorrowSanitizer/rust
          done
      - name: Trigger image workflow
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          gh workflow run image --repo ${{ github.repository }}